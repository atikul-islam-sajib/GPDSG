import sys
import os
import logging
import torch
import matplotlib.pyplot as plt

logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s %(levelname)s %(message)s",
    filemode="w",
    filename="./logs/test.log",
)

sys.path.append("/src")

from generator import Generator


def defined_GPU():
    """
    Determines the best available device for running PyTorch operations.

    This function checks if the Metal Performance Shaders (MPS) backend is available for PyTorch on MacOS, which indicates the availability of GPU support. If MPS is available, it sets the device to 'mps' (GPU). Otherwise, it defaults to using the CPU.

    Returns:
        torch.device: The determined device (either 'mps' for GPU or 'cpu').

    Example:
        >>> device = defined_GPU()
        >>> print(device)  # Prints 'mps' if GPU is available, else 'cpu'

    Note:
        - This function is specifically useful for MacOS users with compatible hardware for MPS.
        - On systems without MPS support or on operating systems other than MacOS, this will default to using the CPU.
        - Ensure that PyTorch is installed and torch.backends.mps is accessible.
    """
    device = torch.device("mps" if torch.backends.mps.is_available() else "cpu")
    return device


def get_best_model():
    """
    Retrieves the path to the best (most recent) model checkpoint from a specified directory.

    This function scans the checkpoint directory for model files and selects the one that is assumed to be the most recent based on its naming convention. The function assumes that the model files are named or numbered in such a way that the last one in the directory is the best model.

    Returns:
        str: The file path of the best model checkpoint.

    Raises:
        FileNotFoundError: If the checkpoint directory does not exist or is empty.

    Example:
        >>> best_model_path = get_best_model()
        >>> print(best_model_path)  # Displays the path of the most recent model checkpoint

    Note:
        - The function uses the 'os' library to interact with the file system.
        - The checkpoint directory path is hardcoded as './models/checkpoints/'.
        - It is assumed that the model files are stored as separate files within this directory.
        - Ensure that the naming convention of the model files reflects their chronological order.
    """
    checkpoint_path = "./models/checkpoints/"
    best_model = os.path.append(
        checkpoint_path, str(len(os.listdir(checkpoint_path)) - 1)
    )
    return best_model


def create_noise_data(batch_size=20, latent_space=100, image_height=1, image_width=1):
    """
    Generates a tensor of random noise data suitable for input to a generative model.

    This function creates a tensor of random values with dimensions specified by the function parameters. The tensor is then transferred to the most appropriate device (GPU or CPU) determined by the `defined_GPU` function.

    Parameters:
        batch_size (int): Number of samples to generate in the batch. Default is 20.
        latent_space (int): Size of the latent space (dimensionality of the noise vector). Default is 100.
        image_height (int): Height dimension for each sample in the batch. Default is 1.
        image_width (int): Width dimension for each sample in the batch. Default is 1.

    Returns:
        torch.Tensor: A tensor of random noise data, shaped (batch_size, latent_space, image_height, image_width) and transferred to the appropriate device.

    Example:
        >>> noise_data = create_noise_data(20, 100, 1, 1)
        >>> print(noise_data.shape)  # Prints torch.Size([20, 100, 1, 1])

    Note:
        - This function is typically used to generate input for generative models like GANs (Generative Adversarial Networks).
        - The generated noise data serves as a starting point for the generator model to produce synthetic data (such as images).
        - Ensure that PyTorch is installed and the `defined_GPU` function is available.
    """
    noise_data = torch.randn(batch_size, latent_space, image_height, image_width)

    device = defined_GPU()

    noise_data = noise_data.to(device)
    return noise_data


def display_image(generated_image):
    """
    Displays and saves a grid of generated images.

    This function takes a batch of generated images (as tensors) and displays them in a grid format using Matplotlib. Each image in the batch is reshaped to 28x28 dimensions, which is typical for datasets like MNIST. The images are displayed in a figure of size 10x10 inches. Additionally, the grid of images is saved as a PNG file in a specified directory.

    Parameters:
        generated_image (torch.Tensor): A batch of images generated by a model, expected as PyTorch tensors.

    Note:
        - The function assumes the input tensor is on the GPU and moves it to the CPU before processing.
        - It reshapes each image in the batch to 28x28. This shape needs to be adjusted if dealing with images of different dimensions.
        - The function saves the output image grid to './outputs/generated_image.png'. Ensure this directory exists or adjust the path accordingly.
        - Matplotlib is used for displaying and saving the image, so ensure it is installed in the environment.

    Example:
        >>> generated_image = torch.randn(20, 1, 28, 28)  # Example tensor for demonstration
        >>> display_image(generated_image)  # Displays and saves the image grid

    Raises:
        Exception: If an error occurs during the display or saving process, it will be logged as an exception.
    """
    plt.figure(figsize=(10, 10))

    for index, image in enumerate(generated_image):
        plt.subplot(4, 5, index + 1)
        plt.imshow(image.cpu().detach().numpy().reshape(28, 28))
        plt.axis("off")

    plt.savefig("./outputs/generated_image.png")
    plt.show()


def test_DCGAN():
    """
    Tests a Deep Convolutional Generative Adversarial Network (DCGAN) by generating images.

    This function automates the process of loading the best model checkpoint for the DCGAN's generator, generating a batch of noise data, and using the generator to produce images from this data. It then attempts to display these generated images using the `display_image` function.

    Steps:
    1. Loads the best model checkpoint using the `get_best_model` function.
    2. Sets up the device (GPU or CPU) for running the model.
    3. Initializes the Generator model and loads the checkpoint.
    4. Generates noise data and feeds it to the Generator to produce images.
    5. Displays the generated images using `display_image`.

    Raises:
        Exception: Logs any exceptions that occur during the image generation or display process.

    Example:
        >>> test_DCGAN()  # This will run the DCGAN test and display generated images

    Note:
        - The function assumes the presence of a `Generator` class and its corresponding pre-trained model checkpoint.
        - It also assumes that the `display_image` function is defined and can accept the generated images.
        - Any exceptions raised during the process are caught and logged for debugging purposes.
        - The function uses global logging settings to log messages and exceptions.
    """
    model = get_best_model()
    device = defined_GPU()

    generator = Generator().to(device)
    generator.load_state_dict(torch.load(model))

    generated_image = generator(create_noise_data())

    try:
        display_image(generated_image)
    except Exception as e:
        logging.exception("Generated image is not defined".capitalize())


if __name__ == "__main__":
    logging.info("Testing the Generator model".capitalize())

    test_DCGAN()

    logging.info("Testing completed".capitalize())
